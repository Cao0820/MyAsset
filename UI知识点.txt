Anchor
	应用在父子上，子物体的位置是根据父物体的变化而变化的，而子物体和父物体联系的桥梁就是Anchor

Pivot      （自身轴点）
        	Pivot中心点，就是该UI元素旋转缩放的中心点，左下角为(0,0)右上角为(1,1)

AnchoredPosition3D
	public Vector3 anchoredPosition3D { get; set; }
	作用是：改变RectTransform的PosX,Y,Z
	（是以设置的 anchors 为中心的，默认如果不设置 anchors 中心点是在屏幕中间）

绝对布局（有锚点时）
               PosX,PosY,PosZ,Width,Height   
               width表示宽度，height表示高度。——>无论父物体怎么变化，子物体宽度和高度是恒定不变的。

相对布局（有锚框时）  
              Left,Top,PosZ,Right,Bottom
              left表示相对父对象左边的距离，top上边，right右边，bottom下边。（ 相当于设置的offsetMin和offsetMax的值 ）
				 ——>无论父物体怎么变化，子物体所占的比例不变，也就说子物体会跟随父对象变化。

              （相当于有锚框）
AnchorMin： 表示锚点的X和Y的最小值      rectTransform.anchorMin = new Vector2(0.3f, 0.3f);   范围（0-1）
AnchorMax：表示锚点的X和Y的最大值      rectTransform.anchorMax = new Vector2(0.7f, 0.7f);   范围（0-1）
                     表示的是该点所在位置占父物体大小的比例，无论父物体怎么变大缩小，子物体所占的比例不变。
                （也相当于有锚框）
offsetMin：表示UI距离左边和底边的距离     rectTransform.offsetMin = new Vector2(40f, 40f);
offsetMax:  表示UI距离右边和上边的距离     rectTransform.offsetMax = new Vector2(-40f, -40f);

sizeDelta = offfsetMax - offsetMin;
———————————————————————————————————————————————
RectTransform
	rectTransform.position           UI的屏幕坐标
	transform.position                 UI的屏幕坐标
	transform.LocalPosition         UI相对于父级位置的坐标
	rectTransform.rect.width         UI的总长
	rectTransform.rect.height        UI的总高
	rectTransform.pivot.x/y           UI中心点的x或y
	————有锚框时——————
	--设置UI的锚框 X、Y的最大值和最小值
  	testRectTransform.anchorMin = new Vector2(0, 0);
        	testRectTransform.anchorMax = new Vector2(1, 1);
	--设置UI四边相对于父对象四边的距离
	testRectTransform.offsetMin = Vector2.zero;
     	testRectTransform.offsetMax = new Vector2(400, 300);
	或
	testRectTransform.sizeDelta = new Vector2(400, 300); 
	————没锚框时——————
	--设置UI的Width和Height
	testRectTransform.sizeDelta = new Vector2(400, 300);
	--设置UI位置的X和Y值
	testRectTransform.anchoredPosition = new Vector3(200, 400);
	testRectTransform.anchoredPosition3D = new Vector3(200, 400);

————————————————————————————————————————————————
限制子UI_A 在父级UI_B 里的活动的范围
	最小x坐标 = B当前x坐标 - B轴心距离B左边界的距离 + A轴心距离A左边界的距离
	      minx  =  B.rectTransform.position.x  
                                   -  B.rectTransform.pivot.x * B.rectTransform.rect.width * canvas.scaleFactor
		   + A.rectTransform.pivot.x * A.rectTransform.rect.width * canvas.scaleFactor
	最大x坐标 = B当前x坐标 + B轴心距离B右边界的距离  - A轴心距离A右边界的距离
	      minx  =  B.rectTransform.position.x  
                                   +  (1-B.rectTransform.pivot.x) * B.rectTransform.rect.width * canvas.scaleFactor
		   - (1-A.rectTransform.pivot.x) * A.rectTransform.rect.width * canvas.scaleFactor
	最小y坐标 = B当前y坐标 -  B轴心距离B下边界的距离 + A轴心距离A下边界的距离
	最大y坐标 = B当前y坐标 + B轴心距离B上边界的距离  - A轴心距离A上边界的距离
